<% 
/*
 * Copyright 2012 Integrated Marine Observing System (IMOS)

 * This file is part of the NetCDFInput component 
 * 
 * The NetCDFInput component is free software: you 
 * can redistribute it and/or modify it under the terms of the GNU 
 * General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later
 * version.
 * 
 * The NetCDFInput component is distributed in the
 * hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
 * PURPOSE.  See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with the NetCDFInput Component.  If not, 
 * see <http://www.gnu.org/licenses/>. 
 *  
 * For more information please contact the Integrated Marine Observing 
 * System at info@emii.org.au
 */
  %>

<%@ jet
imports="
java.util.List 
java.util.Map
org.talend.core.model.metadata.IMetadataColumn
org.talend.core.model.metadata.IMetadataTable
org.talend.core.model.process.EConnectionType
org.talend.core.model.process.ElementParameterParser 
org.talend.core.model.process.IConnection
org.talend.core.model.process.INode
org.talend.designer.codegen.config.CodeGeneratorArgument
org.talend.core.model.metadata.types.JavaTypesManager
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

// Retrieve component properties
String scaleMissing = ElementParameterParser.getValue(node, "__SCALE_MISSING__");
String nullValueHandling = ElementParameterParser.getValue(node, "__MISSING_VALUE_HANDLING__");
String oneBasedIndex = ElementParameterParser.getValue(node, "__ONE_BASED_INDEX__");
String trimStrings = ElementParameterParser.getValue(node, "__TRIM_STRINGS__");

List<Map<String, String>> columnMappingOverrides = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__COLUMN_MAPPINGS__");

List< ? extends IConnection> conns = node.getOutgoingSortedConnections();

for (int i=0; i < conns.size(); i++) {
	IConnection conn = conns.get(i);

    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)	)||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
    	IMetadataTable connMetadata = conn.getMetadataTable();
    	
%>
		if (connName_<%=cid %>.equals("<%=conn.getName() %>")) {
			<%=conn.getName() %> = new <%=conn.getName() %>Struct();
<%    	
    	
        List<IMetadataColumn> listColumns = connMetadata.getListColumns();
        
        for (IMetadataColumn column : listColumns) {
        	String columnName = column.getLabel();

%>
			String <%=cid %>_name_<%=columnName %> = columnNameMapping_<%=cid %>.get("<%=columnName %>");
			String <%=cid %>_type_<%=columnName %> = columnTypeMapping_<%=cid %>.get("<%=columnName %>");
			
			au.org.emii.talend.dap.reader.NetcdfReader reader_<%=cid %>_<%=columnName %> = readers_<%=cid %>.get(<%=cid %>_name_<%=columnName %>);
			
			if (<%=cid %>_name_<%=columnName %> == null || (<%=cid %>_type_<%=columnName %> .equals("VARIABLE") && reader_<%=cid %>_<%=columnName %> == null)) {
				// skip this column - no mapping or the variable doesn't exist
			} else if (<%=cid %>_type_<%=columnName %> .equals("VARIABLE")) {
<%    			
        	String ttg = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
	        	
			boolean checkMissing = scaleMissing.equals("true") && nullValueHandling.equals("NULL_VALUES") && column.isNullable() && !ttg.equals("String");

			if (checkMissing) { %> 
				ucar.nc2.dataset.VariableDS variable = (ucar.nc2.dataset.VariableDS)ncDataset_<%=cid %>.findVariable(<%=cid %>_name_<%=columnName %>);
				
				if (variable.isMissing(reader_<%=cid %>_<%=columnName %>.getDouble(indexValues_<%=cid %>))) {
					<%=conn.getName() %>.<%=columnName %> = null;
				} else {
<%        
        	} 
        	
        	if (ttg.equals("Byte")) {
%>
					<%=conn.getName() %>.<%=columnName %> = new Byte(reader_<%=cid %>_<%=columnName %>.getByte(indexValues_<%=cid %>));
<%        
			} else if (ttg.equals("byte")) {
%>
					<%=conn.getName() %>.<%=columnName %> = reader_<%=cid %>_<%=columnName %>.getByte(indexValues_<%=cid %>);
<%
			} else if (ttg.equals("Boolean")) {
%>	
					<%=conn.getName() %>.<%=columnName %> = new Boolean(reader_<%=cid %>_<%=columnName %>.getBoolean(indexValues_<%=cid %>));
<%
			} else if (ttg.equals("boolean")) {
%>
					<%=conn.getName() %>.<%=columnName %> = reader_<%=cid %>_<%=columnName %>.getBoolean(indexValues_<%=cid %>);
<%
			} else if (ttg.equals("Character")) {
%>
					<%=conn.getName() %>.<%=columnName %> = new Character(reader_<%=cid %>_<%=columnName %>.getChar(indexValues_<%=cid %>));
<%
			} else if (ttg.equals("char")) {
%>
					<%=conn.getName() %>.<%=columnName %> = reader_<%=cid %>_<%=columnName %>.getChar(indexValues_<%=cid %>);
<%
			} else if (ttg.equals("Float")) {
%>
					<%=conn.getName() %>.<%=columnName %> = new Float(reader_<%=cid %>_<%=columnName %>.getFloat(indexValues_<%=cid %>));
<%
			} else if (ttg.equals("float")) {
%>
					<%=conn.getName() %>.<%=columnName %> = reader_<%=cid %>_<%=columnName %>.getFloat(indexValues_<%=cid %>);
<%
			} else if (ttg.equals("Double")) {
%>
					<%=conn.getName() %>.<%=columnName %> = new Double(reader_<%=cid %>_<%=columnName %>.getDouble(indexValues_<%=cid %>));
<%
			} else if (ttg.equals("double")) {
%>
					<%=conn.getName() %>.<%=columnName %> = reader_<%=cid %>_<%=columnName %>.getDouble(indexValues_<%=cid %>);
<%
			} else if (ttg.equals("Short")) {
%>
					<%=conn.getName() %>.<%=columnName %> = new Short(reader_<%=cid %>_<%=columnName %>.getShort(indexValues_<%=cid %>));
<%
			} else if (ttg.equals("short")) {
%>
					<%=conn.getName() %>.<%=columnName %> = reader_<%=cid %>_<%=columnName %>.getShort(indexValues_<%=cid %>);
<%
			} else if (ttg.equals("Integer")) {
%>
					<%=conn.getName() %>.<%=columnName %> = new Integer(reader_<%=cid %>_<%=columnName %>.getInt(indexValues_<%=cid %>));
<%
			} else if (ttg.equals("int")) {
%>
					<%=conn.getName() %>.<%=columnName %> = reader_<%=cid %>_<%=columnName %>.getInt(indexValues_<%=cid %>);
<%
			} else if (ttg.equals("Long")) {
%>
					<%=conn.getName() %>.<%=columnName %> = new Long(reader_<%=cid %>_<%=columnName %>.getLong(indexValues_<%=cid %>));
<%
			} else if (ttg.equals("long")) {
%>
					<%=conn.getName() %>.<%=columnName %> = reader_<%=cid %>_<%=columnName %>.getLong(indexValues_<%=cid %>);
<%
			} else if (ttg.equals("Object")) {
%>
					<%=conn.getName() %>.<%=columnName %> = reader_<%=cid %>_<%=columnName %>.getObject(indexValues_<%=cid %>);
<%
			} else if (ttg.equals("String")) {
%>
					<%=conn.getName() %>.<%=columnName %> = reader_<%=cid %>_<%=columnName %>.getString(indexValues_<%=cid %>)<%=trimStrings.equals("true")?".trim()":"" %>;
<%
			}
			
			if (checkMissing) { %>
				}
<%			} 
%>
			} else {
				au.org.emii.talend.dap.IndexValue dimensionValue = null;
				
				for (au.org.emii.talend.dap.IndexValue indexValue : indexValues_<%=cid %>) {
					if (indexValue.getName().equals(<%=cid %>_name_<%=columnName %>)) {
						dimensionValue = indexValue;
						break;
					}
				}	
				
				if (dimensionValue != null) {
					int index = dimensionValue.getValue()<%= oneBasedIndex.equals("true")?" + 1":""%>;
<%

        	if (ttg.equals("Short")) {
%>
				<%=conn.getName() %>.<%=columnName %> = new Short(index);
<%
			} else if (ttg.equals("short")) {
%>
				<%=conn.getName() %>.<%=columnName %> = index;
<%
			} else if (ttg.equals("Integer")) {
%>
				<%=conn.getName() %>.<%=columnName %> = new Integer(index);
<%
			} else if (ttg.equals("int")) {
%>
				<%=conn.getName() %>.<%=columnName %> = index;
<%
			} else if (ttg.equals("Long")) {
%>
				<%=conn.getName() %>.<%=columnName %> = new Long(index);
<%
			} else if (ttg.equals("long")) {
%>
				<%=conn.getName() %>.<%=columnName %> = index;
<%
			} else if (ttg.equals("String")) {
%>
				<%=conn.getName() %>.<%=columnName %> = new Integer(index).toString();
<%
			} 
%>
				}			
			}
<%		
        }
%>
		} else {
			<%=conn.getName() %> = null;
		}
<%        
    }
} 
%>

