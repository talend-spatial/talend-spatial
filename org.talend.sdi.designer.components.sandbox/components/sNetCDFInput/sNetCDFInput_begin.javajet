<% 
/*
 * Copyright 2012 Integrated Marine Observing System (IMOS)

 * This file is part of the NetCDFInput component 
 * 
 * The NetCDFInput component is free software: you 
 * can redistribute it and/or modify it under the terms of the GNU 
 * General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later
 * version.
 * 
 * The NetCDFInput component is distributed in the
 * hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
 * PURPOSE.  See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with the NetCDFInput Component.  If not, 
 * see <http://www.gnu.org/licenses/>. 
 *  
 * For more information please contact the Integrated Marine Observing 
 * System at info@emii.org.au
 */
  %>

<%@ jet 
    imports="
    	java.util.Iterator
        java.util.List 
        java.util.Map
        java.util.Set 
        java.util.LinkedHashMap
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser 
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn 
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.EConnectionType
        org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
    " 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

// Retrieve component properties
String filename = ElementParameterParser.getValue(node, "__FILENAME__");
List<Map<String, String>> columnMappingOverrides = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__COLUMN_MAPPINGS__");
String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

// Enhanced dataset options
String scaleMissing = ElementParameterParser.getValue(node, "__SCALE_MISSING__");
String convertEnums = ElementParameterParser.getValue(node, "__CONVERT_ENUMS__");

// Missing value options
String isFillerMissing = ElementParameterParser.getValue(node, "__FILLER_MISSING__");
String isInvalidMissing = ElementParameterParser.getValue(node, "__INVALID_MISSING__");
String isMissingMissing = ElementParameterParser.getValue(node, "__MISSING_MISSING__");
String nullValueHandling = ElementParameterParser.getValue(node, "__MISSING_VALUE_HANDLING__");


// Get list of column names used in connections and mapped variables/dimensions 

%>

java.util.Map<String, String> columnNameMapping_<%=cid %> = new java.util.LinkedHashMap<String, String>();
java.util.Map<String, String> columnTypeMapping_<%=cid %> = new java.util.LinkedHashMap<String, String>();

<%
List< ? extends IConnection> conns = node.getOutgoingConnections();

for (int i=0; i < conns.size(); i++) {
	IConnection conn = conns.get(i);

    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)	)||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
    	IMetadataTable connMetadata = conn.getMetadataTable();
    	
        List<IMetadataColumn> listColumns = connMetadata.getListColumns();
        
        for (IMetadataColumn column : listColumns) {
			        	
        	String columnName = column.getLabel();
        	
        	// determine column to NetCDF dimension/variable mapping
        	
			String name = "\"" + columnName + "\"";
			String type = column.isKey()?"DIMENSION":"VARIABLE";
			
			for (Map<String, String> columnMapOverride : columnMappingOverrides) {
				if (columnMapOverride.get("COLUMN").equals(columnName)) {
					name = columnMapOverride.get("VARIABLE").equals("")?name:columnMapOverride.get("VARIABLE");
					type = columnMapOverride.get("TYPE");
					break;
				} 
			}
			
			// Update column name/variable/dimension name mappings
			 
			%>
			if (<%=name %> != null && !<%=name %>.trim().equals("")) { 
       			columnNameMapping_<%=cid %>.put("<%=columnName %>", <%=name %>);
   				columnTypeMapping_<%=cid %>.put("<%=columnName %>", "<%=type %>");
       		}
       		<%
        }
    }
}

// Begin component processing

%>
int nbFeature_<%=cid %> = 0;

String filename_<%=cid %> = <%=filename %>;

<% if (("false").equals(dieOnError)) {%>
	boolean error_<%=cid %> = false;
	String errorTrace_<%=cid %> = "";
<% }

   if (scaleMissing.equals("true")) { %>
	ucar.nc2.dataset.NetcdfDataset.setFillValueIsMissing(<%=isFillerMissing.equals("true") %>);
  	ucar.nc2.dataset.NetcdfDataset.setInvalidDataIsMissing(<%=isInvalidMissing.equals("true") %>);
  	ucar.nc2.dataset.NetcdfDataset.setMissingDataIsMissing(<%=isMissingMissing.equals("true") %>);
  	ucar.nc2.dataset.NetcdfDataset.setUseNaNs(<%=nullValueHandling.equals("NANS") %>);
<% } %>

ucar.nc2.dataset.NetcdfDataset ncDataset_<%=cid %> = null;

try {
<%	if (scaleMissing.equals("false") && convertEnums.equals("false")) { %>
	ncDataset_<%=cid %> = ucar.nc2.dataset.NetcdfDataset.openDataset(filename_<%=cid %>, false, null);
<% } else { %>
	java.util.Set<ucar.nc2.dataset.NetcdfDataset.Enhance> enhanceMode_<%=cid %> = new java.util.HashSet<ucar.nc2.dataset.NetcdfDataset.Enhance>();
<%
      if (scaleMissing.equals("true")) { %>
      enhanceMode_<%=cid %>.add(ucar.nc2.dataset.NetcdfDataset.Enhance.ScaleMissing);
<%    }
 
      if (convertEnums.equals("true")) { %>
      enhanceMode_<%=cid %>.add(ucar.nc2.dataset.NetcdfDataset.Enhance.ConvertEnums);
<%    } %>
	
	  ncDataset_<%=cid %> = ucar.nc2.dataset.NetcdfDataset.openDataset(filename_<%=cid %>, enhanceMode_<%=cid %>, 0, null, null);
<%	} %>
			
	// Create readers for each variable.  Readers return the value of the variable for particular index values
	
	java.util.Map<String, au.org.emii.talend.dap.reader.NetcdfReader> readers_<%=cid %> = new java.util.LinkedHashMap<String, au.org.emii.talend.dap.reader.NetcdfReader>();
	
	for (java.util.Map.Entry<String, String> typeMapping : columnTypeMapping_<%=cid %>.entrySet()) {
		if (typeMapping.getValue().equals("VARIABLE")) {
			String name = columnNameMapping_<%=cid %>.get(typeMapping.getKey());
			ucar.nc2.Variable variable = ncDataset_<%=cid %>.findVariable(name);
			if (variable != null) {
				readers_<%=cid %>.put(name, new au.org.emii.talend.dap.reader.NetcdfReader(variable));
			}
		}
	}
		
	java.util.Map<String,java.util.Iterator<java.util.Set<au.org.emii.talend.dap.IndexValue>>> connIterators_<%=cid %> = new java.util.LinkedHashMap<String, java.util.Iterator<java.util.Set<au.org.emii.talend.dap.IndexValue>>>();
	 
	au.org.emii.talend.dap.IndexRangesBuilder indexRangesBuilder_<%=cid %>;
				
<%

// Create iterator for each connection - iterate over all possible index combinations for variables to be output on connection

for (int i=0; i < conns.size(); i++) {
	IConnection conn = conns.get(i);
	
	String connName = conn.getName();

    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)	)||(conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
    	IMetadataTable connMetadata = conn.getMetadataTable();

%>

		indexRangesBuilder_<%=cid %> = new au.org.emii.talend.dap.IndexRangesBuilder();
		
<%    	
        List<IMetadataColumn> listColumns = connMetadata.getListColumns();
        
        for (IMetadataColumn column : listColumns) {
        	String columnName = column.getLabel();
%>
        	String <%=cid %>_name_<%=connName %>_<%=columnName %> = columnNameMapping_<%=cid %>.get("<%=column.getLabel() %>");
        	String <%=cid %>_type_<%=connName %>_<%=columnName %> = columnTypeMapping_<%=cid %>.get("<%=column.getLabel() %>");
        	
        	if (<%=cid %>_type_<%=connName %>_<%=columnName %>.equals("VARIABLE") && <%=cid %>_name_<%=connName %>_<%=columnName %> != null) {
				ucar.nc2.Variable variable = ncDataset_<%=cid %>.findVariable(<%=cid %>_name_<%=connName %>_<%=columnName %>);
				if (variable != null) {
					indexRangesBuilder_<%=cid %>.addDimensions(variable);
				}
			}
<%        	
        }
%>

		connIterators_<%=cid %>.put("<%=connMetadata.getLabel() %>", indexRangesBuilder_<%=cid %>.getIterator());
		
<%		
    }
}
%>
		for (String connName_<%=cid %> : connIterators_<%=cid %>.keySet()) {
			java.util.Iterator<java.util.Set<au.org.emii.talend.dap.IndexValue>> connIterator_<%=cid %> = connIterators_<%=cid %>.get(connName_<%=cid %>);
			
			while (connIterator_<%=cid %>.hasNext()) {
				java.util.Set<au.org.emii.talend.dap.IndexValue> indexValues_<%=cid %> = connIterator_<%=cid %>.next();

