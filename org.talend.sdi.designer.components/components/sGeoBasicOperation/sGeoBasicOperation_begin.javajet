<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    
    String operationType = ElementParameterParser.getValue(node, "__OPERATION_TYPE__");    
    String clipperXmin = ElementParameterParser.getValue(node, "__CLIPPER_XMIN__");
    String clipperYmin = ElementParameterParser.getValue(node, "__CLIPPER_YMIN__");
    String clipperXmax = ElementParameterParser.getValue(node, "__CLIPPER_XMAX__");
    String clipperYmax = ElementParameterParser.getValue(node, "__CLIPPER_YMAX__");
    String sourceCRS = ElementParameterParser.getValue(node, "__SOURCE_CRS__");
    String targetCRS = ElementParameterParser.getValue(node, "__TARGET_CRS__");
    String simplificationTolerence = ElementParameterParser.getValue(node, "__TOLERANCE__");
    String tx = ElementParameterParser.getValue(node, "__TX__");
    String ty = ElementParameterParser.getValue(node, "__TY__");
    String rotation = ElementParameterParser.getValue(node, "__ROTATION__");
    String ax = ElementParameterParser.getValue(node, "__AX__");
    String ay = ElementParameterParser.getValue(node, "__AY__");
    String sx = ElementParameterParser.getValue(node, "__SX__");
    String sy = ElementParameterParser.getValue(node, "__SY__");
    String use_centroid = ElementParameterParser.getValue(node, "__USE_CENTROID_AS_ANCHOR__");
    String lenient = ElementParameterParser.getValue(node, "__LENIENT__");
    String crsTransform = ElementParameterParser.getValue(node, "__CRS_TRANSFORM__");
    String crsTransformPropertyFile = ElementParameterParser.getValue(node, "__CRS_TRANSFORM_FILE__");
    
    
    String cid = node.getUniqueName(); 
 
    
   
    
    if (operationType.equals("CLIPPER")) {
%>
com.vividsolutions.jts.geom.GeometryFactory f_<%=cid %> = new com.vividsolutions.jts.geom.GeometryFactory();
com.vividsolutions.jts.geom.Envelope e_<%=cid %> = new 
        com.vividsolutions.jts.geom.Envelope (
                <%=clipperXmin %>, <%=clipperXmax %>,
                <%=clipperYmin %>, <%=clipperYmax %>
        );
com.vividsolutions.jts.geom.Geometry clipper_<%=cid %> = f_<%=cid %>.toGeometry(e_<%=cid %>);
System.out.println("Clipper: " + clipper_<%=cid %>.toString());

<%

    }else if (operationType.equals("DOUGLAS_PEUCKER") || operationType.equals("TOPOLOGY_PRESERVING")){    
%>         
    double tol_<%=cid %> = java.lang.Double.valueOf(<%=simplificationTolerence%>);
<%



    }else if (operationType.equals("TRANSFORM")){    
%>    
    com.vividsolutions.jts.geom.util.AffineTransformation at_<%=cid %> = 
        new com.vividsolutions.jts.geom.util.AffineTransformation();
<%
        if (!tx.equals("") && !ty.equals("")) {
%>        
    at_<%=cid %>.compose(com.vividsolutions.jts.geom.util.AffineTransformation.translationInstance(
            new Double(<%=tx %>), new Double(<%=ty %>)));
<%
        }
    
        if (!rotation.equals("") && !ax.equals("") && !ay.equals("") && use_centroid.equals("false")) {
%>            
    at_<%=cid %>.compose(com.vividsolutions.jts.geom.util.AffineTransformation.rotationInstance(
                Math.toRadians(new Double(<%=rotation %>)),
                new Double(<%=ax %>), 
                new Double(<%=ay %>)
                )
            );
<%
        } else if (!rotation.equals("") && use_centroid.equals("false")) {
%>
    at_<%=cid %>.compose(com.vividsolutions.jts.geom.util.AffineTransformation.rotationInstance(
            Math.toRadians(new Double(<%=rotation %>))));
<%        
        }

        if (!sx.equals("") && !sy.equals("")) {
%>        
    at_<%=cid %>.compose(com.vividsolutions.jts.geom.util.AffineTransformation.scaleInstance(
            new Double(<%=sx %>), new Double(<%=sy %>)));
<%
        }


    } else if (operationType.equals("PROJ")) {
        
        // Load Custom coordinate operations file - start
        if (crsTransform.equals("true")) {
%>
java.util.Properties props_<%=cid %> = new java.util.Properties();
java.io.InputStream is_<%=cid %> = null;
String transformAsWkt_<%=cid %> = "";
String propertyId_<%=cid %> = <%=sourceCRS %>.replaceAll("EPSG:", "") 
                            + "," 
                            + <%=targetCRS %>.replaceAll("EPSG:", "");
java.io.File f_<%=cid %> = null;

// First try loading from the current directory
try {
    f_<%=cid %> = new java.io.File(<%=crsTransformPropertyFile %>);
    is_<%=cid %> = new java.io.FileInputStream(f_<%=cid %>);
    props_<%=cid %>.load(is_<%=cid %>);
    transformAsWkt_<%=cid %> = props_<%=cid %>.getProperty(propertyId_<%=cid %> , "");
    
    if (transformAsWkt_<%=cid %>.equals("")) {
        System.err.println("Custom transformation for " + propertyId_<%=cid %>
                            + " in file " + <%=crsTransformPropertyFile %> 
                            + " is empty. Use WKT syntax to define custom transformation.");
    }
} catch (Exception e) {
   System.err.println("Failed to load property " + propertyId_<%=cid %>
                            + " in file " + <%=crsTransformPropertyFile %> 
                            + ". Error is: " + e.getMessage());
   is_<%=cid %> = null;
}
<%
        }
        // Custom coordinate operations file - end
%>


// Define CRS and transformation    
org.opengis.referencing.crs.CoordinateReferenceSystem sourceCRS_<%=cid %> = null;
org.opengis.referencing.crs.CoordinateReferenceSystem targetCRS_<%=cid %> = null;
org.opengis.referencing.operation.MathTransform transform_<%=cid %> = null;
try {
     sourceCRS_<%=cid %> = org.geotools.referencing.CRS.decode(<%=sourceCRS %>, true);
     targetCRS_<%=cid %> = org.geotools.referencing.CRS.decode(<%=targetCRS %>, true);

<%
         // Load Custom coordinate operations file - start
         if (crsTransform.equals("true")) {
%>
    try {
        // Hack to replace relative path to gridshift file in property file
        String relativeDiffFileLocation_<%=cid %> = "\"Latitude and longitude difference file\", \"";
        transformAsWkt_<%=cid %> = transformAsWkt_<%=cid %>.replaceAll(relativeDiffFileLocation_<%=cid %> + "./", 
            relativeDiffFileLocation_<%=cid %> + f_<%=cid %>.getParentFile().getCanonicalPath() + "/");
        
        // Load and parse the transformation
        org.geotools.referencing.wkt.MathTransformParser mtp_<%=cid %> = 
            new org.geotools.referencing.wkt.MathTransformParser();
        transform_<%=cid %> = mtp_<%=cid %>.parseMathTransform(transformAsWkt_<%=cid %>);
    } catch (Exception e) {
        System.err.println ("Failed to parse custom transformation: " 
        + transformAsWkt_<%=cid %> + "."
        + "Error message is: " + e.getMessage());
        // TODO : do not try to go further, transform will trigger NPE. Produce error flow ? or return
    }
<%
        } else {
%>
    try {
        transform_<%=cid %> = org.geotools.referencing.CRS.findMathTransform(
                                     sourceCRS_<%=cid %>,
                                     targetCRS_<%=cid %>,
                                     <%=lenient %>);
    } catch (Exception e) {
        System.err.println ("Failed to find Math transformation. Use lenient mode or " 
        + " define a custom coordinate transformation. "
        + "Error message is: " + e.getMessage());
        // TODO : do not try to go further, transform will trigger NPE. Produce error flow ? or return
    }
<%
        }
%>
} catch (Exception e) {
        System.err.println ("Failed to decode CRS. "
        + "Error message is: " + e.getMessage());
}
<%
    }
%>

int nbFeature_<%=cid %> = 0;
int nbFeatureValid_<%=cid %> = 0;
